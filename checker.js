import { ethers } from 'ethers';
import fs from 'fs';

// ABI –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Linea Airdrop (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
const CONTRACT_ABI = [
    "function calculateAllocation(address _account) view returns (uint256 tokenAllocation)",
    "function hasClaimed(address user) view returns (bool claimed)",
    "function CLAIM_END() view returns (uint256)",
    "function TOKEN() view returns (address)"
];

// –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Linea Airdrop
const CONTRACT_ADDRESS = '0x87bAa1694381aE3eCaE2660d97fe60404080Eb64';

// RPC URL –¥–ª—è Linea Mainnet
const LINEA_RPC = 'https://rpc.linea.build';

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
const provider = new ethers.JsonRpcProvider(LINEA_RPC);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function readWalletsFromFile(filename) {
    try {
        const content = fs.readFileSync(filename, 'utf8');
        return content.split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0 && ethers.isAddress(line));
    } catch (error) {
        console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ wallets.txt:${colors.reset}`, error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å 18 –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
function formatTokenAmount(amount, decimals = 18) {
    const formatted = ethers.formatUnits(amount, decimals);
    return parseFloat(formatted).toFixed(6);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
function formatAddress(address) {
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
async function checkAllocation(address) {
    try {
        const [tokenAllocation, hasClaimed, claimEnd, tokenAddress] = await Promise.all([
            contract.calculateAllocation(address),
            contract.hasClaimed(address),
            contract.CLAIM_END(),
            contract.TOKEN()
        ]);

        const now = BigInt(Math.floor(Date.now() / 1000));
        const claimEndBigInt = BigInt(claimEnd);
        const isExpired = now > claimEndBigInt;
        const claimEndDate = new Date(Number(claimEnd) * 1000).toLocaleString('ru-RU');
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const timeLeft = Number(claimEndBigInt - now);
        const daysLeft = Math.floor(timeLeft / (24 * 60 * 60));
        const hoursLeft = Math.floor((timeLeft % (24 * 60 * 60)) / (60 * 60));

        return {
            address,
            tokenAllocation: formatTokenAmount(tokenAllocation),
            hasClaimed: hasClaimed ? '–î–∞' : '–ù–µ—Ç',
            isExpired: isExpired ? '–î–∞' : '–ù–µ—Ç',
            claimEndDate,
            tokenAddress,
            timeLeft: isExpired ? '–ò—Å—Ç–µ–∫–ª–æ' : `${daysLeft}–¥ ${hoursLeft}—á`,
            rawAllocation: tokenAllocation
        };
    } catch (error) {
        console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞ ${address}:${colors.reset}`, error.message);
        return {
            address,
            tokenAllocation: '–û—à–∏–±–∫–∞',
            hasClaimed: '–û—à–∏–±–∫–∞',
            isExpired: '–û—à–∏–±–∫–∞',
            claimEndDate: '–û—à–∏–±–∫–∞',
            tokenAddress: '–û—à–∏–±–∫–∞',
            timeLeft: '–û—à–∏–±–∫–∞',
            rawAllocation: ethers.parseUnits('0', 18)
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
function displayResults(results) {
    console.log('\n' + '='.repeat(80));
    console.log(`${colors.bright}${colors.cyan}üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ê–õ–õ–û–ö–ê–¶–ò–ô LINEA${colors.reset}`);
    console.log('='.repeat(80));
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
    const headerAddress = `${colors.bright}–ê–¥—Ä–µ—Å${colors.reset}`.padEnd(40);
    const headerAllocation = `${colors.bright}–ê–ª–ª–æ–∫–∞—Ü–∏—è${colors.reset}`.padEnd(25);
    const headerClaimed = `${colors.bright}–ó–∞—è–≤–ª–µ–Ω–æ${colors.reset}`.padEnd(15);
    
    console.log(`${headerAddress} | ${headerAllocation} | ${headerClaimed}`);
    console.log('-'.repeat(80));
    
    // –î–∞–Ω–Ω—ã–µ
    results.forEach(result => {
        const allocationColor = result.tokenAllocation === '–û—à–∏–±–∫–∞' ? colors.red : 
                              parseFloat(result.tokenAllocation) > 0 ? colors.green : colors.yellow;
        const claimedColor = result.hasClaimed === '–î–∞' ? colors.green : 
                           result.hasClaimed === '–û—à–∏–±–∫–∞' ? colors.red : colors.yellow;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —à–∏—Ä–∏–Ω–æ–π –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const addressField = `${colors.blue}${formatAddress(result.address)}${colors.reset}`.padEnd(40);
        const allocationField = `${allocationColor}${result.tokenAllocation}${colors.reset}`.padEnd(25);
        const claimedField = `${claimedColor}${result.hasClaimed}${colors.reset}`.padEnd(15);
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        console.log(`${addressField} | ${allocationField} | ${claimedField}`);
    });
    
    console.log('-'.repeat(80));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalAllocation = results.reduce((sum, r) => {
        if (r.rawAllocation && typeof r.rawAllocation === 'bigint') {
            return sum + parseFloat(ethers.formatUnits(r.rawAllocation, 18));
        }
        return sum;
    }, 0);
    
    const claimedCount = results.filter(r => r.hasClaimed === '–î–∞').length;
    const errorCount = results.filter(r => r.tokenAllocation === '–û—à–∏–±–∫–∞').length;
    
    console.log(`${colors.bright}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${colors.reset}`);
    console.log(`${colors.green}‚Ä¢ –í—Å–µ–≥–æ –∞–ª–ª–æ–∫–∞—Ü–∏–π: ${totalAllocation.toFixed(6)} —Ç–æ–∫–µ–Ω–æ–≤${colors.reset}`);
    console.log(`${colors.blue}‚Ä¢ –£–∂–µ –∑–∞—è–≤–ª–µ–Ω–æ: ${claimedCount} –∞–¥—Ä–µ—Å–æ–≤${colors.reset}`);
    if (errorCount > 0) {
        console.log(`${colors.red}‚Ä¢ –û—à–∏–±–∫–∏: ${errorCount} –∞–¥—Ä–µ—Å–æ–≤${colors.reset}`);
    }
    
    // –¢–æ–ø –∞–ª–ª–æ–∫–∞—Ü–∏–π
    const validResults = results.filter(r => r.tokenAllocation !== '–û—à–∏–±–∫–∞' && parseFloat(r.tokenAllocation) > 0);
    if (validResults.length > 0) {
        validResults.sort((a, b) => parseFloat(b.tokenAllocation) - parseFloat(a.tokenAllocation));
        console.log(`\n${colors.bright}üèÜ –¢–û–ü-3 –ê–õ–õ–û–ö–ê–¶–ò–ò:${colors.reset}`);
        validResults.slice(0, 3).forEach((result, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : 'ü•â';
            console.log(`${medal} ${formatAddress(result.address)}: ${colors.green}${result.tokenAllocation}${colors.reset} —Ç–æ–∫–µ–Ω–æ–≤`);
        });
    }
    
    console.log('='.repeat(80));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log(`${colors.bright}${colors.cyan}üöÄ –ó–∞–ø—É—Å–∫ —á–µ–∫–µ—Ä–∞ –∞–ª–ª–æ–∫–∞—Ü–∏–π Linea...${colors.reset}`);
    console.log(`${colors.yellow}üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${CONTRACT_ADDRESS}${colors.reset}`);
    console.log(`${colors.yellow}üåê –°–µ—Ç—å: Linea Mainnet${colors.reset}\n`);
    
    // –ß–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
    const wallets = readWalletsFromFile('wallets.txt');
    
    if (wallets.length === 0) {
        console.error(`${colors.red}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ wallets.txt${colors.reset}`);
        console.log(`${colors.yellow}üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª wallets.txt —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)${colors.reset}`);
        return;
    }
    
    console.log(`${colors.green}üìã –ù–∞–π–¥–µ–Ω–æ ${wallets.length} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏${colors.reset}`);
    console.log(`${colors.blue}‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–ª–æ–∫–∞—Ü–∏–∏...${colors.reset}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
    const results = [];
    for (let i = 0; i < wallets.length; i++) {
        const wallet = wallets[i];
        const progress = `${colors.cyan}–ü—Ä–æ–≤–µ—Ä–∫–∞ ${i + 1}/${wallets.length}:${colors.reset} ${formatAddress(wallet)}`;
        process.stdout.write(`\r${progress}`);
        
        const result = await checkAllocation(wallet);
        results.push(result);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('\n'); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayResults(results);
    
    console.log(`\n${colors.green}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
    console.error(`${colors.red}‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:${colors.reset}`, error);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main().catch(console.error);
